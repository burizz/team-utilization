package storage 

import (
    "context"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var client *mongo.Client

func ConnectMongo() {    
    log.Println("Connecting to MongoDB ...")
	var err error

	var ctx, cancel = context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	clientOptions := options.Client().ApplyURI("mongodb://localhost:27017/")
	client, err = mongo.Connect(ctx, clientOptions)
	if err != nil {
		log.Fatalf("unable to initialize mongo client: %v", err)
	}

	err = client.Ping(ctx, nil)
	if err != nil {
		log.Fatalf("databse unreachable: %v", err)
	}
	log.Println("DB Connected successfully")

    	// dbname -> table name
	defer client.Disconnect(context.Background())
	awsteamCollection := client.Database("utilization").Collection("awsteam")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	res, err := awsteamCollection.InsertOne(ctx, bson.M{"name": "pi", "value": 3.14159})
	if err != nil {
		log.Fatalf("db insert error: %v", err)
	}

	id := res.InsertedID
	fmt.Println(id)

	cursor, err := awsteamCollection.Find(ctx, bson.M{})
	if err != nil {
		log.Fatal(err)
	}

	var awsTeam []bson.M
	if err = cursor.All(ctx, &awsTeam); err != nil {
		log.Fatal(err)
	}
	fmt.Println(awsTeam)
}

